package main

import (
	"fmt"
	"genomics/genomes"
	"math/rand"
	"sort"
)

type Segment struct {
	Marker int // A random number below this (and above the previous)...
	InsPos int // ...means you insert here
}

type Distribution []Segment

// Generated by analyse.py
var InsertionDistro Distribution = Distribution{
	{41, 22},
	{82, 2},
	{126, 24},
	{171, 7},
	{219, 22204},
	{277, 22302},
	{337, 6},
	{397, 27},
	{458, 21607},
	{530, 9},
	{602, 19},
	{684, 22303},
	{768, 10},
	{852, 22197},
	{941, 18},
	{1033, 14},
	{1151, 17},
	{1346, 22203},
	{1547, 16},
	{1753, 12},
}

func (d Distribution) RandomPosition() int {
	total := d[len(d)-1].Marker
	n := rand.Intn(total)
	index := sort.Search(len(d), func(i int) bool {
		return d[i].Marker >= n
	})
	return d[index].InsPos
}

/*
Pick a random position in g, but chosen such as to find each of the four bases
equally often
*/
func RandomBalancedPosition(g *genomes.Genomes, margin int) int {
	nts := []byte("GATC")
	nt := nts[rand.Intn(4)]

	for {
		pos := rand.Intn(g.Length()-margin*2) + margin
		if g.Nts[0][pos] == nt {
			return pos
		}
	}
}

func TestDistribution() {
	for i := 0; i < 10000; i++ {
		fmt.Printf("%d\n", InsertionDistro.RandomPosition())
	}
}
